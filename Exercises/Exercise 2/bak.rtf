{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier-Oblique;\f1\fmodern\fcharset0 Courier-BoldOblique;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red95\green93\blue95;\red19\green19\blue19;\red252\green47\blue125;
\red133\green96\blue154;\red129\green128\blue129;\red254\green187\blue91;\red178\green149\blue255;\red251\green251\blue249;
\red188\green122\blue255;\red153\green168\blue186;\red254\green196\blue152;\red255\green244\blue120;\red105\green213\blue226;
}
{\*\expandedcolortbl;;\csgenericrgb\c37255\c36471\c37255;\csgenericrgb\c7451\c7451\c7451;\csgenericrgb\c98824\c18431\c49020;
\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c50588\c50196\c50588;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c69804\c58431\c100000;\csgenericrgb\c98431\c98431\c97647;
\csgenericrgb\c73725\c47843\c100000;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c99608\c76863\c59608;\csgenericrgb\c100000\c95686\c47059;\csgenericrgb\c41176\c83529\c88627;
}
\margl1440\margr1440\vieww9780\viewh17540\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\i\fs26 \cf2 \cb3 //Exercise 2.1: Drawing Drawer\
//------------------------------------------------------------\
//             Pre-Setup: Variable Declarations\
//------------------------------------------------------------\
//Canvas Width & Height\
\cf4 let 
\f1\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 ;\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//     P5 Setup: Variable and Parameter Initializations\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 setup\cf6 ()\{\
    
\f0\i \cf2 //Set Canvas Dimensions to Window Dimensions\
    
\f1\b \cf5 canvasW 
\f2\i0\b0 \cf8 = \cf9 windowWidth\cf6 ;\
    
\f1\i\b \cf5 canvasH 
\f2\i0\b0 \cf8 = \cf9 windowHeight\cf6 ;\
\
    
\f0\i \cf2 //Create Canvas\
    
\f2\i0 \cf9 createCanvas\cf6 (
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 );\
\
\}\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//  P5 Draw: Computations and Renderings of Dynamic Entities\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 draw\cf6 ()\{\
    
\f0\i \cf2 //Clear the Canvas of the Previous Composition\
    
\f2\i0 \cf9 clear\cf6 ();\
\
    
\f0\i \cf2 //To Draw a Rocket, need 5 basic shapes\
    //Rectangle for the Fuselage\
    //Two triangular fins around the fuselage\
    //A Circle for the Window\
    //A Triangle for the Nose Cone\
\
\
    //Set the Background Color to roughly Midnight\
    
\f2\i0 \cf9 background\cf6 (\cf10 10\cf6 ,\cf10 10\cf6 ,\cf10 30\cf6 );\
\
    
\f0\i \cf2 //Paint a Starry Sky\
    //x is a counter variable that splits the canvas horizontally into 10 columns\
    \cf4 for
\f2\i0 \cf6 ( 
\f0\i \cf4 let 
\f2\i0 \cf11 x \cf8 = 
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf8 /\cf10 10\cf6 ; \cf11 x \cf8 <= 
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf6 ; \cf11 x \cf8 += 
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf8 /\cf10 10\cf6 )\{\
\
        
\f0\i \cf2 //y is a counter variable that splits the canvas vertically into 10 rows\
        //Since this is nested within each column, this loop renders all 10 rows of 1 column at a time\
        \cf4 for 
\f2\i0 \cf6 (
\f0\i \cf4 let 
\f2\i0 \cf11 y \cf8 = 
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf8 /\cf10 10\cf6 ; \cf11 y \cf8 <= 
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 ; \cf11 y \cf8 += 
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf8 /\cf10 10\cf6 )\{\
            
\f0\i \cf2 //Remove Stroke\
            
\f2\i0 \cf9 strokeWeight\cf6 (\cf10 0\cf6 );\
            
\f0\i \cf2 //Set Circle Fill to White\
            
\f2\i0 \cf9 fill\cf6 (\cf10 255\cf6 ,\cf10 255\cf6 ,\cf10 255\cf6 );\
            
\f0\i \cf2 //Randomly 'Jitter' the circle's X,Y coordinates using the random function between +/- 1/2 of a column and +/- 1/2 of a row\
            //Also randomly determine the star size from 0 to 3\
            
\f2\i0 \cf9 circle\cf6 (\cf11 x \cf8 + \cf9 random\cf6 (\cf8 -
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf8 /\cf10 20\cf6 ,
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf8 /\cf10 20\cf6 ),\cf11 y\cf8 +\cf9 random\cf6 (\cf8 -
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf8 /\cf10 20\cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf8 /\cf10 20\cf6 ),\cf9 random\cf6 (\cf10 0\cf6 ,\cf10 3\cf6 ))\
        \}\
    \}\
\
    
\f0\i \cf2 //Move the Frame to the Mouse Position\
    
\f2\i0 \cf9 translate\cf6 (\cf9 mouseX\cf6 ,\cf9 mouseY\cf6 );\
    
\f0\i \cf2 //Draw the Rocket with a size of canvasH/4\
    
\f2\i0 \cf7 drawRocket\cf6 (
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf8 /\cf10 4\cf6 ,\cf10 50\cf6 );\
\
\}\
\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//                     P5 User Functions\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 drawRocket \cf6 (
\f0\i \cf12 rocketHeight
\f2\i0 \cf6 , 
\f0\i \cf12 rocketColor
\f2\i0 \cf6 )\{\
    
\f0\i \cf2 //Keep in mind fuselage is painted 50% lighter for some contrast\
    \
    //Remove Stroke from the Shapes\
    
\f2\i0 \cf9 strokeWeight\cf6 (\cf10 0\cf6 );\
    \
    \
\
    
\f0\i \cf2 //Assume the overall shape has an aspect ratio of 1:4\
    \cf4 let 
\f2\i0 \cf11 rocketWidth \cf8 = 
\f0\i \cf12 rocketHeight
\f2\i0 \cf8 /\cf10 4\cf6 ;\
\
    
\f0\i \cf2 //Proportions of the Rocket:\
    //Fuselage about 2/3rds the overall width\
    \cf4 let 
\f2\i0 \cf11 fuselageWidth \cf8 = \cf6 (\cf10 3\cf8 /\cf10 5\cf6 )\cf8 *\cf11 rocketWidth\cf6 ;\
    
\f0\i \cf2 //Fuselage about 2/3rds of the overall height\
    \cf4 let 
\f2\i0 \cf11 fuselageHeight \cf8 = \cf6 (\cf10 7\cf8 /\cf10 10\cf6 )\cf8 *
\f0\i \cf12 rocketHeight
\f2\i0 \cf6 ;\
\
    
\f0\i \cf2 //Fuselage Window\
    \cf4 let 
\f2\i0 \cf11 fuselageWindowR \cf8 = \cf11 fuselageWidth\cf8 /\cf10 2\cf6 ;\
    
\f0\i \cf2 //Fuselage Window's Top Edge should be about 1/8th below the top of the Fuselage\
    \cf4 let 
\f2\i0 \cf11 fuselageWindowHeight \cf8 = \cf10 1\cf8 /\cf10 8 \cf8 * \cf11 fuselageWidth \cf8 + \cf11 fuselageWindowR\cf6 ;\
\
\
    
\f0\i \cf2 //Stabilizer Fins occupy whatever the remainder of the overall width is, after the fuselage occupies it, and then splits it\
    \cf4 let 
\f2\i0 \cf11 finWidth \cf8 = \cf6 (\cf11 rocketWidth\cf8 -\cf11 fuselageWidth\cf6 )\cf8 /\cf10 2\cf6 ;\
    
\f0\i \cf2 //Fin should be 1/2 of the fuselage height\
    \cf4 let 
\f2\i0 \cf11 finHeight \cf8 = \cf6 (\cf10 1\cf8 /\cf10 2\cf6 )\cf8 *\cf11 fuselageHeight\cf6 ;\
    
\f0\i \cf2 //Extra Height where the Fin extends below the Fuselage\
    \cf4 let 
\f2\i0 \cf11 finExtraHeight \cf8 = \cf10 1\cf8 /\cf10 10\cf8 *
\f0\i \cf12 rocketHeight
\f2\i0 \cf6 ;\
\
    
\f0\i \cf2 //Nosecone proportion is about 1/4th the overall Rocket Height\
    \cf4 let 
\f2\i0 \cf11 noseconeHeight \cf8 = 
\f0\i \cf12 rocketHeight 
\f2\i0 \cf8 - \cf11 fuselageHeight \cf8 - \cf11 finExtraHeight\cf6 ;\
\
    
\f0\i \cf2 //Move the Rocket such that it's bisected by the Y axis and that the origin of the canvas is positioned to the center of the rocket's fuselage window\
    
\f2\i0 \cf9 translate\cf6 (\cf8 -\cf6 (\cf11 rocketWidth\cf8 /\cf10 2\cf6 ),\cf8 -\cf6 (\cf11 noseconeHeight\cf8 +\cf11 fuselageWindowHeight\cf6 ));\
\
    
\f0\i \cf2 //Translate the Entire Rocket Right by the FinWidth to accommodate the Left Fin\
    
\f2\i0 \cf9 translate\cf6 (\cf11 finWidth\cf6 ,\cf10 0\cf6 );\
\
    \
    
\f0\i \cf2 //Nosecone - Darker Grey\
    //Sits on top of the Fuselage and meets in the middle of it\
    
\f2\i0 \cf9 fill\cf6 (
\f0\i \cf12 rocketColor
\f2\i0 \cf6 );\
    \cf9 triangle\cf6 (\
        \cf10 0\cf6 ,\cf11 noseconeHeight\cf6 ,\
        \cf11 fuselageWidth\cf6 ,\cf11 noseconeHeight\cf6 ,\
        \cf10 0.5\cf8 *\cf11 fuselageWidth\cf6 ,\cf10 0\
    \cf6 );\
    \
    
\f0\i \cf2 //Fuselage Section - Lighter Grey\
    //Offset below the Nosecone\
    
\f2\i0 \cf9 fill\cf6 (\cf10 1.5\cf8 *
\f0\i \cf12 rocketColor
\f2\i0 \cf6 );\
    \cf9 quad\cf6 (\
        \cf10 0\cf6 ,\cf11 noseconeHeight\cf6 ,\
        \cf11 fuselageWidth\cf6 ,\cf11 noseconeHeight\cf6 ,\
        \cf11 fuselageWidth\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
        \cf10 0\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
    );\
\
    
\f0\i \cf2 //Fuselage Window Frame\
    //Offset a bit below the top of the Fuselage\
    //Slightly larger than the actual Fuselage Window\
    
\f2\i0 \cf9 fill\cf6 (
\f0\i \cf12 rocketColor
\f2\i0 \cf6 );\
    \cf9 circle\cf6 (\
        \cf11 fuselageWidth\cf8 /\cf10 2\cf6 ,\cf11 noseconeHeight \cf8 + \cf11 fuselageWindowHeight\cf6 , \cf11 fuselageWindowR\cf8 *\cf10 1.2\
    \cf6 );\
\
    
\f0\i \cf2 //Fuselage Window\
    //Offset a bit below the top of the Fuselage\
    
\f2\i0 \cf9 fill\cf6 (\cf10 180\cf6 ,\cf10 230\cf6 ,\cf10 240\cf6 );\
    \cf9 circle\cf6 (\
        \cf11 fuselageWidth\cf8 /\cf10 2\cf6 ,\cf11 noseconeHeight \cf8 + \cf11 fuselageWindowHeight\cf6 , \cf11 fuselageWindowR\
    \cf6 );\
\
\
    
\f0\i \cf2 //Thruster Triangle Fire\
    //Looped to Generate Inner Triangles\
    \cf4 for
\f2\i0 \cf6 (
\f0\i \cf4 let 
\f2\i0 \cf11 i \cf8 = \cf10 0\cf6 ; \cf11 i \cf8 < \cf10 9\cf6 ; \cf11 i\cf8 ++\cf6 )\{\
        
\f0\i \cf2 //Changes rocketColor to transition from red to orange to yellow\
        
\f2\i0 \cf9 fill\cf6 (\cf10 200\cf8 +\cf10 10\cf8 *\cf11 i\cf6 ,\cf10 0\cf8 +\cf10 40\cf8 *\cf11 i\cf6 ,\cf10 0\cf8 +\cf10 10\cf8 *\cf11 i\cf6 );\
        
\f0\i \cf2 //Somewhat random Increments that's randomly build\
        
\f2\i0 \cf9 widthIncrement \cf8 = \cf11 rocketWidth\cf8 *\cf10 0.08\cf8 *\cf11 i\cf6 ;\
        \cf9 heightDecrement \cf8 = 
\f0\i \cf12 rocketHeight
\f2\i0 \cf8 *\cf6 (\cf10 0.5\cf8 -\cf6 (\cf10 0.04\cf8 *\cf11 i\cf6 ))\
        \cf9 triangle\cf6 (\
            
\f0\i \cf2 //Starts at Half Left Fin's Width and Ends on Half the Right Fin's Width\
            
\f2\i0 \cf10 0\cf8 -\cf11 finWidth\cf8 /\cf10 2 \cf8 + \cf9 widthIncrement\cf6 , \cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
            \cf11 fuselageWidth \cf8 + \cf11 finWidth\cf8 /\cf10 2 \cf8 - \cf9 widthIncrement\cf6 , \cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
            \cf11 fuselageWidth\cf8 /\cf10 2\cf6 , \cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf8 +\cf9 random\cf6 (\cf10 0.8\cf8 *\cf9 heightDecrement\cf6 ,\cf10 1.2\cf8 *\cf9 heightDecrement\cf6 )\
        )\
    \}\
\
    
\f0\i \cf2 //Right Stabilizer Fin\
    //Offset to the right of the bottom of the Fuselage\
    //Note top vertex of the fin is placed next to the fuselage which is offset a positive y, equal to noseconeHeight, below the y=0 line\
    
\f2\i0 \cf9 fill\cf6 (
\f0\i \cf12 rocketColor
\f2\i0 \cf6 );\
    \cf9 triangle\cf6 (\
        \cf11 fuselageWidth\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
        \cf11 fuselageWidth\cf8 +\cf11 finWidth\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf8 +\cf11 finExtraHeight\cf6 ,\
        \cf11 fuselageWidth\cf6 , (\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ) \cf8 - \cf11 finHeight\
    \cf6 );\
\
    
\f0\i \cf2 //Left Stabilizer Fin\
    //Offset to the left of the Bottom of the Fuselage\
    
\f2\i0 \cf9 fill\cf6 (
\f0\i \cf12 rocketColor
\f2\i0 \cf6 );\
    \cf9 triangle\cf6 (\
        \cf10 0\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ,\
        \cf10 0\cf8 -\cf11 finWidth\cf6 ,\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf8 +\cf11 finExtraHeight\cf6 ,\
        \cf10 0\cf6 , (\cf11 fuselageHeight\cf8 +\cf11 noseconeHeight\cf6 ) \cf8 - \cf11 finHeight\
    \cf6 );\
\
\}
\f0\i \cf2 //End of Draw Rocket\
\
\
\
//Exercise 2.2: Red Remover\
//------------------------------------------------------------\
//             Pre-Setup: Variable Declarations\
//------------------------------------------------------------\
//Canvas Width & Height\
\cf4 let 
\f1\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 ;\
\

\f0\i \cf2 //Circle Vars for Circle Coordinates and a Radius\
\cf4 let 
\f1\b \cf5 circleX
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleY
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 ;\
\

\f0\i \cf2 //Color Vars that will be respectively the input and output of the removeColorRed function that is the highlight of the exercise\
//Will assigned with a 'color(r,g,b)' value in setup()\
\cf4 let 
\f1\b \cf5 colorIn
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 ;\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//     P5 Setup: Variable and Parameter Initializations\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 setup\cf6 ()\{\
    
\f0\i \cf2 //Set Canvas Dimensions to Window Dimensions\
    
\f1\b \cf5 canvasW 
\f2\i0\b0 \cf8 = \cf9 windowWidth\cf6 ;\
    
\f1\i\b \cf5 canvasH 
\f2\i0\b0 \cf8 = \cf9 windowHeight\cf6 ;\
\
    
\f0\i \cf2 //Create Canvas\
    
\f2\i0 \cf9 createCanvas\cf6 (
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 );\
\
    
\f0\i \cf2 //Set a nominal radius value that somewhat scales off of the user's window size\
    
\f1\b \cf5 circleR 
\f2\i0\b0 \cf8 = \cf10 1\cf8 /\cf10 8 \cf8 * 
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 ;\
\
    
\f0\i \cf2 //Set FrameRate to 5 as 60 strobes the color\
    
\f2\i0 \cf9 frameRate\cf6 (\cf10 4\cf6 );\
\
\}\
\

\f0\i \cf2 //------------------------------------------------------------\
//  P5 Draw: Computations and Renderings of Dynamic Entities\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 draw\cf6 ()\{\
    
\f0\i \cf2 //Clear the Canvas of the Previous Circle\
    
\f2\i0 \cf9 clear\cf6 ();\
\
    
\f0\i \cf2 //Initialize colorIn with a random RGB value\
    
\f1\b \cf5 colorIn 
\f2\i0\b0 \cf8 = \cf9 color\cf6 (\cf9 random\cf6 (\cf10 0\cf6 ,\cf10 255\cf6 ), \cf9 random\cf6 (\cf10 0\cf6 ,\cf10 255\cf6 ), \cf9 random\cf6 (\cf10 0\cf6 ,\cf10 255\cf6 ));\
\
    
\f0\i \cf2 //Log the value\
    
\f1\b \cf5 console
\f2\i0\b0 \cf6 .\cf7 log\cf6 (\cf13 "Color In:"\cf6 ,
\f1\i\b \cf5 colorIn
\f2\i0\b0 \cf6 );\
\
    
\f0\i \cf2 //Assign colorOut to the array output of 'removeColorRed(colorIn)\
    
\f1\b \cf5 colorOut 
\f2\i0\b0 \cf8 = \cf7 removeColorRed\cf6 (
\f1\i\b \cf5 colorIn
\f2\i0\b0 \cf6 );\
    
\f0\i \cf2 //Use p5.js inline to parse the array's color values as a color\
    
\f1\b \cf5 colorOut 
\f2\i0\b0 \cf8 = \cf9 color\cf6 (
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 [\cf10 0\cf6 ],
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 [\cf10 1\cf6 ],
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 [\cf10 2\cf6 ])\
\
    
\f0\i \cf2 //Log the value\
    
\f1\b \cf5 console
\f2\i0\b0 \cf6 .\cf7 log\cf6 (\cf13 "Color Out:"\cf6 ,
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 );\
\
\
\
    
\f0\i \cf2 //Set Circle Center's X & Y coordinates to the mouseX and mouseY coordinates\
    
\f1\b \cf5 circleX 
\f2\i0\b0 \cf8 = \cf9 mouseX\cf6 ;\
    
\f1\i\b \cf5 circleY 
\f2\i0\b0 \cf8 = \cf9 mouseY\cf6 ;\
\
    
\f0\i \cf2 //Set the Color Fill\
    
\f2\i0 \cf9 fill\cf6 (
\f1\i\b \cf5 colorOut
\f2\i0\b0 \cf6 );\
    
\f0\i \cf2 //Draw an Outer Circle with the post-removed color\
    
\f2\i0 \cf9 circle\cf6 (
\f1\i\b \cf5 circleX
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleY
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 );\
\
\
    
\f0\i \cf2 //Set the Color Fill\
    
\f2\i0 \cf9 fill\cf6 (
\f1\i\b \cf5 colorIn
\f2\i0\b0 \cf6 );\
    
\f0\i \cf2 //Draw an Inner Circle with pre-removed color\
    
\f2\i0 \cf9 circle\cf6 (
\f1\i\b \cf5 circleX
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleY
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf8 /\cf10 2\cf6 );\
\
    \
\}
\f0\i \cf2 //End of Draw Loop\
\
//------------------------------------------------------------\
//                     P5 User Functions\
//------------------------------------------------------------\
\
//Function that removes the red color value from an input color\
//Argument must be a p5.js rgb color fed in the form of 'color(r,g,b)'\
\cf4 function 
\f2\i0 \cf7 removeColorRed\cf6 (
\f0\i \cf12 color
\f2\i0 \cf6 )\{\
    
\f0\i \cf2 //Convert the Color Object into a String\
    \cf4 let 
\f2\i0 \cf11 colorStr \cf8 = 
\f0\i \cf12 color
\f2\i0 \cf6 .\cf7 toString\cf6 ();\
\
    
\f0\i \cf2 //Trim the 'rgba(' portion by splitting on '(' and grabbing the string after it\
    
\f2\i0 \cf11 colorStr \cf8 = \cf11 colorStr\cf6 .\cf7 split\cf6 (\cf13 "("\cf6 )\
    \cf11 colorStr \cf8 = \cf11 colorStr\cf6 [\cf10 1\cf6 ];\
\
    
\f0\i \cf2 //Trim the ')' porition at the end by splitting on ')' and grabbing the string before it\
    
\f2\i0 \cf11 colorStr \cf8 = \cf11 colorStr\cf6 .\cf7 split\cf6 (\cf13 ")"\cf6 );\
    \cf11 colorStr \cf8 = \cf11 colorStr\cf6 [\cf10 0\cf6 ];\
\
    
\f0\i \cf2 //Split the string, which should be now comma separated values\
    
\f2\i0 \cf11 colorStr \cf8 = \cf11 colorStr\cf6 .\cf7 split\cf6 (\cf13 ","\cf6 );\
    
\f0\i \cf2 //The array should now correspond to [r,g,b,a]\
    //Grab the values and store as r, g, b values\
    \cf4 let 
\f2\i0 \cf11 r \cf8 = \cf11 colorStr\cf6 [\cf10 0\cf6 ];\
    
\f0\i \cf4 let 
\f2\i0 \cf11 g \cf8 = \cf11 colorStr\cf6 [\cf10 1\cf6 ];\
    
\f0\i \cf4 let 
\f2\i0 \cf11 b \cf8 = \cf11 colorStr\cf6 [\cf10 2\cf6 ];\
\
    
\f0\i \cf2 //Set red component to zero\
    
\f2\i0 \cf11 r \cf8 = \cf10 0\cf6 ;\
\
    
\f0\i \cf2 //Return the Color Values\
    \cf4 return 
\f2\i0 \cf6 [\cf11 r\cf6 , \cf11 g\cf6 , \cf11 b\cf6 ];\
\
\}
\f0\i \cf2 // End of removeColorRed function\
\
\
\
\
//Exercise 2.3: Circle Rebound\
//------------------------------------------------------------\
//             Pre-Setup: Variable Declarations\
//------------------------------------------------------------\
//Canvas Width & Height\
\cf4 let 
\f1\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 ;\
\

\f0\i \cf2 //Circle Vars for Circle Coordinates and a Radius\
\cf4 let 
\f1\b \cf5 circleX
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleY
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 ;\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//     P5 Setup: Variable and Parameter Initializations\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 setup\cf6 ()\{\
    
\f0\i \cf2 //Set Canvas Dimensions to Window Dimensions\
    
\f1\b \cf5 canvasW 
\f2\i0\b0 \cf8 = \cf9 windowWidth\cf6 ;\
    
\f1\i\b \cf5 canvasH 
\f2\i0\b0 \cf8 = \cf9 windowHeight\cf6 ;\
\
    
\f0\i \cf2 //Create Canvas\
    
\f2\i0 \cf9 createCanvas\cf6 (
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 );\
\
    
\f0\i \cf2 //Fixed Integer Value to Circle Radius in px\
    
\f1\b \cf5 circleR 
\f2\i0\b0 \cf8 = \cf10 10\cf6 ;\
\
\}\
\
\

\f0\i \cf2 //------------------------------------------------------------\
//  P5 Draw: Computations and Renderings of Dynamic Entities\
//------------------------------------------------------------\
\
\cf4 function 
\f2\i0 \cf7 draw\cf6 ()\{\
\
    
\f0\i \cf2 //Fade the Background per Frame to gently erase the previous drawing\
    //Fade Rate = %fade per second / FPS\
    
\f2\i0 \cf9 background\cf6 (\cf13 'rgba(250,250,250,0.04)'\cf6 );\
\
    
\f0\i \cf2 //Build the Polar Vector and Assign it to circleX and circleY;\
    
\f1\b \cf5 circleX 
\f2\i0\b0 \cf8 = \cf7 polarPoint\cf6 (
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 ).\cf9 x\cf6 ;\
    
\f1\i\b \cf5 circleY 
\f2\i0\b0 \cf8 = \cf7 polarPoint\cf6 (
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 ).\cf9 y\cf6 ;\
\
    
\f0\i \cf2 //Not Implemented as it's not called for in the exercise\
    //Converts Rectilinear Coordinates to Polar Coordinates and then Plots the Points\
        //Should be redundant if done correctly\
        //circleX = polarConversion().x;\
        //circleY = polarConversion().y;\
\
    //Translate the Canvas to the center of the window\
    
\f2\i0 \cf9 translate\cf6 (\cf10 0.5\cf8 *
\f1\i\b \cf5 canvasW
\f2\i0\b0 \cf6 ,\cf10 0.5\cf8 *
\f1\i\b \cf5 canvasH
\f2\i0\b0 \cf6 );\
\
    
\f0\i \cf2 //Draw the Circle\
    
\f2\i0 \cf9 circle\cf6 (
\f1\i\b \cf5 circleX
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleY
\f2\i0\b0 \cf6 ,
\f1\i\b \cf5 circleR
\f2\i0\b0 \cf6 );\
\
\}
\f0\i \cf2 //End of Draw Loop\
\
//------------------------------------------------------------\
//                     P5 User Functions\
//------------------------------------------------------------\
\
//Function that somewhat arbitrarily returns a polar vector based on mouse position\
\cf4 function 
\f2\i0 \cf7 polarPoint\cf6 (
\f0\i \cf12 radius
\f2\i0 \cf6 )\{\
\
    
\f0\i \cf2 //Declare block variables x & y that store vectors to describe the polar point\
    \cf4 let 
\f2\i0 \cf11 x\cf6 ,\cf11 y\cf6 ;\
\
    
\f0\i \cf2 //Note Radius in a polar conversion typically is the square root of the x and y vectors\
    //radius = (Math.sqrt(mouseX*mouseX + mouseY*mouseY))/radius;\
\
    //Invoke the Math library for the cosine and sine methods\
\
    //Horizontal Polar Conversion, x = r*cos(theta)\
        
\f2\i0 \cf11 x \cf8 = 
\f0\i \cf12 radius 
\f2\i0 \cf8 * 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 sin\cf6 (\cf9 mouseX\cf6 );\
\
    
\f0\i \cf2 //Vertical Polar Converstion, x = r*sin(theta)\
        
\f2\i0 \cf11 y \cf8 = 
\f0\i \cf12 radius 
\f2\i0 \cf8 * 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 cos\cf6 (\cf9 mouseX\cf6 );\
\
    
\f0\i \cf2 //Return a vector <x,y> with:\
        \cf4 return 
\f2\i0 \cf9 createVector\cf6 (\cf11 x\cf6 ,\cf11 y\cf6 );\
\
\}
\f0\i \cf2 // End of polarPoint function\
\
\
//Function that does the rectilinear to polar conversion, defaults to converting the mouse coordinates\
\cf4 function 
\f2\i0 \cf7 polarConversion\cf6 (
\f0\i \cf12 x
\f2\i0 \cf8 =\cf9 mouseX\cf6 ,
\f0\i \cf12 y
\f2\i0 \cf8 =\cf9 mouseY\cf6 )\{\
    
\f0\i \cf2 //Invoke the Math library for the cosine and sine methods\
\
    //Note, radius = sqrt(x^2 + y^2)\
    \cf4 let 
\f2\i0 \cf11 radius \cf8 = 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 sqrt\cf6 (
\f0\i \cf12 x
\f2\i0 \cf8 *
\f0\i \cf12 x 
\f2\i0 \cf8 + 
\f0\i \cf12 y
\f2\i0 \cf8 *
\f0\i \cf12 y
\f2\i0 \cf6 );\
    
\f0\i \cf2 //Note, theta = inverse tangent (y / x)\
    \cf4 let 
\f2\i0 \cf11 theta \cf8 = 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 atan\cf6 (
\f0\i \cf12 y
\f2\i0 \cf8 /
\f0\i \cf12 x
\f2\i0 \cf6 );\
\
    
\f0\i \cf2 //Horizontal Polar Conversion, x = r*cos(theta)\
    //x = radius * Math.cos(mouseX);\
    \cf12 x 
\f2\i0 \cf8 = \cf11 radius \cf8 * 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 cos\cf6 (\cf11 theta\cf6 );\
\
    
\f0\i \cf2 //Vertical Polar Converstion, x = r*sin(theta)\
    //y = radius * Math.sin(mouseX);\
    \cf12 y 
\f2\i0 \cf8 = \cf11 radius \cf8 * 
\f1\i\b \cf5 Math
\f2\i0\b0 \cf6 .\cf7 sin\cf6 (\cf11 theta\cf6 );\
\
    
\f0\i \cf2 //Return a vector <x,y> with:\
    \cf4 return 
\f2\i0 \cf9 createVector\cf6 (
\f0\i \cf12 x
\f2\i0 \cf6 ,
\f0\i \cf12 y
\f2\i0 \cf6 );\
\
\}
\f0\i \cf2 // End of polarPoint function\
\
\
\
\
\
\
\
\
\
\
\
\
//------------------------------\
//      Ex2.1 - Drawing Drawer:\
//------------------------------\
/*\
Drawing Drawer\
\
Create a composition of some object - a car, a rocket, a set of keys.\
Move that composition code into a new function ("drawKeys()", for instance).\
Add two arguments to the function (x and y)\
Use those arguments to control the position of each of the drawing calls in the function (things like rect() and circle())\
Finally, either:\
Place the function call in the draw() function, and have your composition follow mouseX and mouseY\
Draw 3+ of your compositions in different spaces on the screen by writing your function call three or more times in either setup() or draw()\
 */\
\
//Pre-p5.js\
    //Create canvasW and canvasH variables to eventually represent canvas Width and canvas height; user customizable but will be set to window width and window height\
\
//In p5.js setup()\
    //Assign Window Width and Window Height respectively to Canvas Width and Canvas Height Variables\
    //Create the Canvas\
    //Set Background Color\
\
//In p5.js draw()\
    //Clear any Previous Draw Call\
    //Translate the frame such that the origin is set to mouseX and mouseY coordinates\
    //Use a function to draw the rocket composition\
\
//Functions\
    //Draw Rocket (size, color)\
        //Set Strokeweight to 0\
        //Set fill to color\
        //Define Proportions,and General Positions of the Rocket\
            //i.e. Rocket is 1/3 as wide as the height of the Rocket\
            //i.e. Fuselage is 2/3 the height of the Rocket, and is the width of the Rocket\
            //i.e. Nosecone is 1/3 the height of the Rocket, and is the width of the Rocket, starts above the Fuselage\
            //i.e. Rocket Fins are 1/3 the height of the fuselage, and are 1/4 the width of the Rocket each, start at the bottom corners of the Rocket\
        //Draw the Rocket\
            //Triangle for Nosecone\
            //Quadrilateral for Fuselage\
            //Triangle for each of the Stabilizer Fins\
        //Draw the Rocket Fire\
            //Create 3 Nested Triangles with slightly smaller width and height with increasing color value\
            //Initial width and height set to fuselage width, and perhaps 1/3 of the Rocket height\
                //For Loop with counter that nominally decrements width and height, but also increments the color\
                //Draw Triangle\
    //End Draw Rocket Function\
\
//End JS\
\
//------------------------------\
//     Ex2.2 - Red Remover\
//------------------------------\
\
/*\
Write a function that\
\
takes a color as an argument ( you can use color(170, 200, 150) )\
sets the red component of that color to zero  ( colorVariableArgumentName.setRed(0) )\
Returns that new color without red\
Then, test this function by drawing a circle to the screen using the result. You might have something like:\
let noRed = removeRed( color(170, 200, 150) );\
\
fill(noRed);\
\
//draw circle\
 */\
\
//Pre-p5.js\
    //Create canvasW and canvasH variables to eventually represent canvas Width and canvas height; user customizable but will be set to window width and window height\
\
    //Declare nominal vars 'circleX' and 'circleY' to represent circle (x,y) coordinates\
    //Declare nominal var 'circleR' to represent radius of the drawn circle\
\
    //Declare nominal var 'colorIn' to represent the input color into the Red Remover Function\
    //Declare nominal var 'colorOut' to represent the input color output of the Red Remover Function, which shall be titled 'removeColorRed'\
\
//In p5.js setup()\
    //Assign Window Width and Window Height respectively to Canvas Width and Canvas Height Variables\
\
    //Assign nominal var 'colorIn' with random RGB values\
        //i.e. colorIn = color(random(0,255),random(0,255),random(0,255))\
        //May be useful to log this into the console\
    //Assign nominal var 'colorOut' as output of the removeColorRed with colorIn as its input\
        //i.e. colorOut = removeColorRed(colorIn);\
        //May be useful to log this into the console\
    //Create the Canvas\
\
//In p5.js draw()\
    // Remember: [Draw() is inherently a continual loop that executes its contents once per frame]\
\
    //Clear the Canvas of the Previous Drawings\
\
    //Set Fill color with 'removeColorRed''s output color\
        //i.e. fill(colorOut);\
\
\
    // Circle X Coordinate == Mouse X Coordinate | Circle Y Coordinate == Mouse Y Coordinate\
    //Assign Vars 'circleX' and 'circleY' respectively to mouseX and mouseY - Must be in Draw as mouseX and mouseY are dynamic and the variable values must be refreshed\
\
    //Draw a circle at coordinates circleX,circleY with nominal radius 'circleR'\
\
//Functions\
    // removeColorRed(color)\{\
        //Color is a variable that represents a p5.js RGB value, such as color(r,g,b)\
\
        //Set the color's red value to zero and return it\
        //i.e. return color.setRed(0);\
\
    //\} End removeColorRed function\
\
//End JS\
\
//Note: Final Algorithim Drastically Shifted due to the nature of JS and assigning objects. P5.js uses a color object and when copying the output, it actually just references the original color object. Therefore any methods or transformations applied to one instance of the color variable apply to all color variables. As such, in the final project I converted the input color to a string, converted it into an array containing r,g,b values and then returned the array. Inside the draw call, I then parsed the array into a color.\
\
\
//------------------------------\
//   Ex2.3 - Polar Points\
//------------------------------\
/*\
Polar Points\
\
Polar coordinates are coordinates on a circle, rather than on a cartesian grid. They can be calculated by taking the sin and cosine of a number. For this exercise, you will write a function that calculates polar coordinates and returns a value that will be used to draw a circle at those coordinates.\
\
For this exercise\
\
In addition to your setup() and draw() calls, add a new function named polarPoint()\
Add one argument to polar point (r)\
In the polar point function, create an x variable and set it to r * Math.sin(mouseX);\
Create a Y variable, set it to the result of r * Math.cos(mouseX);\
Finally, at the end of the function, write return createVector(x,y);\
To test this function:\
\
Set a variable (perhaps res) equal to the result of calling polarPoint() in your draw call\
Add a translate(100,100); line before your drawing methods\
Draw a circle at res.x, res.y, and with a radius of 10.\
(res is technically an 'object', which we will learn more about next week)\
The result will look something like below.\
\
polarPoints.PNG\
\
For more information about polar coordinates: https://en.wikipedia.org/wiki/Polar_coordinate_system\
 */\
\
//Start JS\
\
//Outside Setup\
\
    //Declare Vars 'canvasW' and 'canvasH' to represent width and height of the canva\
\
    //Declare Vars 'circleX' and 'circleY' to represent circle (x,y) coordinates\
    //Declare nominal var 'circleR' to represent radius of the drawn circle\
\
    //Declare carrier var 'polarVector' to hold the value of the 'polarPoint(radius)' function\
\
//Within Setup:\
\
    //Assign Vars 'canvasW' and 'canvasH' in setup() to canvas width and height\
    //Create Canvas\
\
    //Assign Var 'circleR' to a nominal fixed integer value\
\
//Within Draw Call:\
//Remember: [Draw() is inherently a continual loop that executes its contents once per frame]\
\
    //Call 'polarPoint(circleR)' and assign to var polarVector\
\
    //Translate the drawing by x=100 and y=100\
\
    //Draw a circle with center coordinates of polarVector.x and polarVector.y with radius of circleR\
\
//Functions\
    // polarPoint(radius)\{\
\
        //Declare block variables x & y that store vectors to describe the polar point\
\
        //Invoke the Math library for the cosine and sine methods\
\
            //Note, radius = sqrt(x^2 + y^2)\
            //Note, theta = inverse tangent (y / x)\
\
        //Horizontal Polar Conversion, x = r*cos(theta)\
        //x = radius * Math.cos(mouseX);\
\
        //Vertical Polar Converstion, x = r*sin(theta)\
        //y = radius * Math.sin(mouseX);\
\
        //Return a vector <x,y> with:\
        //return createVector(x,y)\
\
    //\} End polarPoint vector generation function\
\
\
//End JS\
\
\
\
\
\
\
\
\
\
\
\
//Applet to cycle between the exercises\
\
//------------------------------------------------------------\
//                   JS Editable Constants\
//------------------------------------------------------------\
\
//Exercise Number\
\cf4 const 
\f1\b \cf5 EXERCISE 
\f2\i0\b0 \cf8 = \cf10 2\cf6 ;\

\f0\i \cf2 //Number of Sub Exercises\
\cf4 const 
\f1\b \cf5 SUB_EXERCISES 
\f2\i0\b0 \cf8 = \cf10 3\cf6 ;\

\f0\i \cf2 //Path to JS Folder - REQUIRED for function 'runScript'\
\cf4 const 
\f1\b \cf5 PATH_JS 
\f2\i0\b0 \cf8 = \cf13 'js/'\cf6 ;\
\

\f0\i \cf2 //------------------------------------------------------------\
//                        JS Code\
//------------------------------------------------------------\
\
//Adds a Script into the Page if there is a URL 'script' parameter found\

\f2\i0 \cf7 addScript\cf6 (\cf7 getURLParam\cf6 (\cf13 "script"\cf6 ));\
\
\

\f0\i \cf2 //Builds Buttons for Defined Exercises\
\cf4 for
\f2\i0 \cf6 (
\f0\i \cf4 let 
\f2\i0 \cf11 i \cf8 = \cf10 1\cf6 ; \cf11 i \cf8 <= 
\f1\i\b \cf5 SUB_EXERCISES
\f2\i0\b0 \cf6 ; \cf11 i\cf8 ++\cf6 )\{\
\
    
\f0\i \cf2 //Create Name of JS File\
    \cf4 let 
\f2\i0 \cf11 ex \cf8 = \cf13 'ex'\cf8 +
\f1\i\b \cf5 EXERCISE
\f2\i0\b0 \cf8 +\cf13 '_'\cf8 +\cf11 i\cf6 ;\
\
    
\f0\i \cf2 //Establish Parent Element to Insert Buttons into\
    \cf4 let 
\f2\i0 \cf11 exNavBar \cf8 = 
\f1\i\b \cf5 document
\f2\i0\b0 \cf6 .\cf7 getElementById\cf6 (\cf13 "ExerciseNavBar"\cf6 );\
\
    
\f0\i \cf2 //Exercise Button\
    \cf4 let 
\f2\i0 \cf11 exButton \cf8 = \cf13 '<div id="'\cf8 + \cf11 ex \cf8 +\cf13 '" class="scriptButton">' \cf8 + \cf13 'Exercise ' \cf8 + \cf11 i \cf8 + \cf13 '</div>'\cf6 ;\
\
    
\f0\i \cf2 //Insert Button\
    
\f2\i0 \cf11 exNavBar\cf6 .\cf9 innerHTML \cf8 += \cf11 exButton\cf6 ;\
\}\
\

\f0\i \cf2 //Builds Corresponding Event Listeners for Defined Exercises\
\cf4 for
\f2\i0 \cf6 (
\f0\i \cf4 let 
\f2\i0 \cf11 i \cf8 = \cf10 1\cf6 ; \cf11 i \cf8 <= 
\f1\i\b \cf5 SUB_EXERCISES
\f2\i0\b0 \cf6 ; \cf11 i\cf8 ++\cf6 )\{\
\
    
\f0\i \cf2 //Create Name of JS File\
    \cf4 let 
\f2\i0 \cf11 ex \cf8 = \cf13 'ex'\cf8 +
\f1\i\b \cf5 EXERCISE
\f2\i0\b0 \cf8 +\cf13 '_'\cf8 +\cf11 i\cf6 ;\
\
    
\f0\i \cf2 //Copy DOM Element ID\
    \cf4 let 
\f2\i0 \cf11 exID \cf8 = 
\f1\i\b \cf5 document
\f2\i0\b0 \cf6 .\cf7 getElementById\cf6 (\cf11 ex\cf6 );\
\
    
\f0\i \cf2 //Create Event Listeners that Append the Desired Script's filename into the URL on DOM Element 'Button' Click\
    
\f2\i0 \cf11 exID\cf6 .\cf7 addEventListener\cf6 (\cf13 "click"\cf6 , 
\f0\i \cf4 function 
\f2\i0 \cf6 ()\{\
        \cf7 appendURLParam\cf6 (\cf13 'script'\cf6 ,\cf11 ex\cf6 )\
    \});\
\}\
\

\f0\i \cf2 //------------------------------------------------------------\
//                        JS Functions\
//------------------------------------------------------------\
\
//Function 'addScript' appends a JS Script to the Document via Document.write\
\cf4 function 
\f2\i0 \cf7 addScript\cf6 (
\f0\i \cf12 scriptFileName
\f2\i0 \cf6 )\{\
    
\f0\i \cf4 if 
\f2\i0 \cf6 (
\f0\i \cf12 scriptFileName 
\f2\i0 \cf8 === \cf13 "ERROR"\cf6 )\{\
        
\f0\i \cf2 //Terminate the Function if an ERROR is found\
        \cf4 return
\f2\i0 \cf6 ;\
    \}\
\
    
\f0\i \cf2 //Set the file extension of the Script File\
    \cf4 const 
\f2\i0 \cf11 fileExtension \cf8 =\cf13 '.js'\cf6 ;\
\
    
\f0\i \cf2 //Write into the DOM a HTML Script Tag with the source set to the function argument\
    
\f1\b \cf5 document
\f2\i0\b0 \cf6 .\cf7 write\cf6 (\
        \cf13 "<script src="\cf8 + \cf13 "\cf14 \\'\cf13 "\cf8 +\
        
\f1\i\b \cf5 PATH_JS 
\f2\i0\b0 \cf8 +\
        
\f0\i \cf12 scriptFileName 
\f2\i0 \cf8 +\
        \cf11 fileExtension \cf8 +\
        \cf13 "\cf14 \\'\cf13 "\cf8 + \cf13 ">\cf14 \\n\cf13 " \cf8 +\
        \cf13 "</script>\cf14 \\n\cf13 "\
    \cf6 )\
\
\}
\f0\i \cf2 //End of Function 'addScript'\
\
//Function to Append Search Parameters to the URL\
\cf4 function 
\f2\i0 \cf7 appendURLParam \cf6 (
\f0\i \cf12 parameter
\f2\i0 \cf6 ,
\f0\i \cf12 input
\f2\i0 \cf6 )\{\
    
\f0\i \cf2 //Creates URL Search Params Object\
    \cf4 let 
\f2\i0 \cf11 URL \cf8 = 
\f0\i \cf4 new 
\f2\i0 \cf7 URLSearchParams\cf6 (
\f1\i\b \cf5 location
\f2\i0\b0 \cf6 .\cf9 search\cf6 );\
    
\f0\i \cf2 //Built-in Method to Add a URL Parameter\
    
\f2\i0 \cf11 URL\cf6 .\cf7 set\cf6 (
\f0\i \cf12 parameter
\f2\i0 \cf6 ,
\f0\i \cf12 input
\f2\i0 \cf6 );\
    
\f0\i \cf2 //Convert the URL Search Params Object to a string and then set the URL to that\
    
\f1\b \cf5 window
\f2\i0\b0 \cf6 .\cf9 location\cf6 .\cf9 search \cf8 = \cf11 URL\cf6 .\cf7 toString\cf6 ();\
\
\}
\f0\i \cf2 //End of Function 'appendURLParam'\
\
//Function to Gather Search Parameter Information\
\cf4 function 
\f2\i0 \cf7 getURLParam\cf6 (
\f0\i \cf12 parameter
\f2\i0 \cf6 )\{\
    
\f0\i \cf2 //Creates URL Search Params Object\
    \cf4 let 
\f2\i0 \cf11 URL \cf8 = 
\f0\i \cf4 new 
\f2\i0 \cf7 URLSearchParams\cf6 (
\f1\i\b \cf5 location
\f2\i0\b0 \cf6 .\cf9 search\cf6 );\
\
    
\f0\i \cf2 //Control Structure to Evaluate if URL actually has the Search Parameter in the First Place\
    //Built-In Method to do a Boolean Check for the Desired URL Parameter\
    \cf4 if 
\f2\i0 \cf6 (\cf11 URL\cf6 .\cf7 has\cf6 (
\f0\i \cf12 parameter
\f2\i0 \cf6 ))\{\
        
\f0\i \cf2 //Built-in Method to Retrieve the Desired URL Parameter\
        \cf4 return 
\f2\i0 \cf11 URL\cf6 .\cf7 get\cf6 (
\f0\i \cf12 parameter
\f2\i0 \cf6 );\
    \} 
\f0\i \cf4 else 
\f2\i0 \cf6 \{\
        
\f0\i \cf2 //Log Error to Console\
        
\f1\b \cf5 console
\f2\i0\b0 \cf6 .\cf7 log\cf6 (\cf13 "URL Parameter does not Exist"\cf6 );\
        
\f0\i \cf4 return 
\f2\i0 \cf13 "ERROR"\cf6 ;\
    \}\
\
\}
\f0\i \cf2 //End of Function 'getURLParam'\
}